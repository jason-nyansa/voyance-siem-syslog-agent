###
# #%L
# VoyanceSiemSyslogAgent
# %%
# Copyright (C) 2019 Nyansa, Inc.
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%
###
# ======================================================================
# Voyance GraphQL API v2 URL
#
# description:  The Voyance GraphQL API v2 URL, refer to documentation:
#               https://support.nyansa.com/hc/en-us/articles/360020743351
#
# example:      https://yourcompany.nyansa.com/api/v2/graphql
# required:     yes
# ======================================================================
voyance.dev.api.url=https://vco12-usvi1.velocloud.net/portal/rest

# ======================================================================
# Voyance GraphQL API v2 Access Token
#
# description:  The Voyance GraphQL API v2 access token for authentication.
#               https://support.nyansa.com/hc/en-us/articles/360020743351
#
# example:      ivG9B_66Bujc-RDaL4cA
# required:     yes
# ======================================================================
voyance.dev.api.token=Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlblV1aWQiOiIyMTJiYjgwZi1mMzNiLTQ1NjItYjZlZi05Y2I4MTZhMWYxYjEiLCJleHAiOjE2NDE2NjUyMzkwMDAsInV1aWQiOiIzNGM4NjAyMy0wMTVlLTExZTYtOGJmMi0wYTgzYzNlNTVlZTkiLCJpYXQiOjE2MTAxMjkyNTZ9.-E3nGJAqWBp0RmOYl-kY_Af7XJDoZhjFfiGszrBQ63c

# ======================================================================
# HTTP Proxy
#
# description:  If a HTTP proxy is required for connections made to the
#               API v2 URL, its hostname and port.
#
# example:      proxy.yourcompany.com:3128
# required:     no
# ======================================================================
http.proxy=

zmq.host=localhost
zmq.port=9002
company.id=2000045

# ======================================================================
# API Data Fetches Enabled
#
# description:  A comma-separated list of API fetch IDs that should be
#               enabled.
#
#               The current available API fetch IDs are:
#               iotOutlierList_all
#               iotDeviceStatsList_last3h
#               iotDeviceStatsList_last24h
#               iotDeviceStatsList_last7d
#               iotDeviceStatsList_last14d
#               iotGroupStatsList_last3h
#               iotGroupStatsList_last24h
#               iotGroupStatsList_last7d
#               iotGroupStatsList_last14d
#               deviceList_updated
#               applicationList_last3h
#               applicationList_last24h
#               deviceEventList_all
#               vcoEnterpriseEvents
#
# example:      iotOutlierList_all,iotDeviceStatsList_last24h
# required:     yes
# ======================================================================
api.fetches.enabled=vcoEnterpriseEvents

# ======================================================================
# API Data Pull Frequency
#
# description:  How frequently new data should be pulled from the API in
#               seconds. It must be a number >= 60.
#
#               It can also be configured in a per API fetch fashion with
#               the pattern "api.pull.frequency.secs.API_FETCH_ID". This
#               takes precedence over the global value.
#
# example:      60
# required:     no
# default:      every 60 seconds
# ======================================================================
api.pull.frequency.secs=60
api.pull.frequency.secs.iotDeviceStatsList_last3h=10800
api.pull.frequency.secs.iotDeviceStatsList_last24h=86400
api.pull.frequency.secs.iotDeviceStatsList_last7d=86400
api.pull.frequency.secs.iotDeviceStatsList_last14d=86400
api.pull.frequency.secs.iotGroupStatsList_last3h=10800
api.pull.frequency.secs.iotGroupStatsList_last24h=86400
api.pull.frequency.secs.iotGroupStatsList_last7d=86400
api.pull.frequency.secs.iotGroupStatsList_last14d=86400
api.pull.frequency.secs.deviceList_updated=3600
api.pull.frequency.secs.applicationList_last3h=10800
api.pull.frequency.secs.applicationList_last24h=86400
api.pull.frequency.secs.deviceEventList_all=600

# ======================================================================
# API Data Pull Threads
#
# description:  How many threads to use for pulling data from the API.
#
# example:      2
# required:     no
# default:      system's available cores / 2
# ======================================================================
api.pull.threads=2

# ======================================================================
# API Historical Data Look-Back
#
# description:  In case no data has ever been pulled from the API and sent,
#               how many seconds to look back for historical data. As soon
#               as an API fetch is completed successfully, its progress is
#               automatically being tracked in the local database file
#               "voyance-agent.mv.db", and only new data would be pulled
#               going forward.
#
# example:      86400
# required:     no
# default:      last 24 hours
# ======================================================================
data.default.lookback.secs=604800

# ======================================================================
# Syslog Output CEF Header
#
# description:  If configured, use this Syslog CEF format header for every
#               Syslog messages sent. The header string must conform to the
#               CEF format with 8 sections separated by "|":
#
#               CEF:Version|Device Vendor|Device Product|Device Version|Signature ID|Name|Severity|Extension
#
#               These variables are available for automatic fill-in:
#               ${cefSignatureId}   The event signature ID, auto-generated
#                                   by Voyance based on the data type.
#                                   e.g.    new_external_host
#
#               ${cefName}          The event class name, auto-generated
#                                   by Voyance based on the data type.
#                                   e.g.    iotOutlierList
#
#               ${cefSeverity}      The event severity level, should be a
#                                   number between 1 to 10 (most severe).
#                                   e.g.    5
#
#               ${cefExtension}     The rest of the Syslog message payload.
#                                   The position and reference of this
#                                   variable should not need to be changed.
#                                   e.g.    model="nest" time="2019-05-30T09:18:22+0000"
#
# example:      CEF:0|Nyansa|voyance-siem-syslog-agent|1.0|${cefSignatureId}|${cefName}|${cefSeverity}|${cefExtension}
# required:     no
# default:      CEF:0|Nyansa|voyance-siem-syslog-agent|1.0|${cefSignatureId}|${cefName}|${cefSeverity}|${cefExtension}
# ======================================================================
output.cef.header=CEF:0|Nyansa|voyance-siem-syslog-agent|1.0|${cefSignatureId}|${cefName}|${cefSeverity}|${cefExtension}

# ======================================================================
# Output Date-Time Format
#
# description:  The Java date format string to be used for formatting
#               timestamp fields for output, refer to documentation:
#               https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html
#
#               If not specified, then all timestamps will be written as
#               number of milliseconds since epoch.
#
# example:      yyyy-MM-dd'T'HH:mm:ssZ
# required:     no
# default:      yyyy-MM-dd'T'HH:mm:ssZ
# ======================================================================
output.datetime.format=yyyy-MM-dd'T'HH:mm:ssZ

# ======================================================================
# Syslog Output Format Template per API Data Fetch
#
# description:  Multiple properties with pattern "output.format.API_FETCH_ID".
#
#               If configure, this format template will override the default
#               one implemented for API_FETCH_ID. With this you can include,
#               exclude, or modify fields to your need. Variables ${fieldName}
#               can be reference for all the fields available in API_FETCH_ID.
#
#               If CEF header is configured, the formatted message payload will
#               be written in the ${cefExtension} section.
#
#               The values of the variables referenced will be encoded in JSON
#               format. These types can be expected:
#               JSON string:    "string"
#               JSON number:    4.0
#               JSON array:     ["a", "b"]
#               JSON object:    {"k1": "v1", "k2": "v2"}
#               others:         true, false, null
#
#               Refer to the JSON specification: https://www.json.org
#
#               With the default template formatted, a message payload e.g.:
#               model="nest" time="2019-05-30T09:18:22+0000" score=4.0
#
# example:      uuid=${uuid} model=${model} time=${time}
# required:     no
# default:      based on API_FETCH_ID implemented
# ======================================================================
output.format.iotOutlierList_all=uuid=${uuid} model=${model} time=${time} outlierType=${outlierType} outlierCategory=${outlierCategory} outlierReason=${outlierReason} outlierValue=${outlierValue}

output.format.iotDeviceStatsList_last24h=uuid=${uuid} model=${model} deviceClass=${deviceClass} isCritical=${isCritical} aggWindow=${aggWindow} aggUpdated=${aggUpdated} totalBytes=${totalBytes} rxBytes=${rxBytes} txBytes=${txBytes} avgBytesPerSec=${avgBytesPerSec} avgRxBytesPerSec=${avgRxBytesPerSec} avgTxBytesPerSec=${avgTxBytesPerSec} totalTimeSecs=${totalTimeSecs} numHosts=${numHosts} numInternalHosts=${numInternalHosts} numExternalHosts=${numExternalHosts} essids=${essids} vlans=${vlans} suspiciousHosts=${suspiciousHosts} highRiskHosts=${highRiskHosts} hostsGeo=${hostsGeo}

output.format.iotGroupStatsList_last24h=model=${model} deviceClass=${deviceClass} isCritical=${isCritical} aggWindow=${aggWindow} aggUpdated=${aggUpdated} numDevices=${numDevices} totalBytes=${totalBytes} rxBytes=${rxBytes} txBytes=${txBytes} avgBytesPerSec=${avgBytesPerSec} avgRxBytesPerSec=${avgRxBytesPerSec} avgTxBytesPerSec=${avgTxBytesPerSec} totalTimeSecs=${totalTimeSecs} numHosts=${numHosts} numInternalHosts=${numInternalHosts} numExternalHosts=${numExternalHosts} numInternalDevices=${numInternalDevices} numExternalDevices=${numExternalDevices} essids=${essids} vlans=${vlans} protocols=${protocols}

output.format.deviceList_updated=uuid=${uuid} macAddr=${macAddr} ipAddress=${ipAddress} hostname=${hostname} userName=${userName} description=${description} isActive=${isActive} isWireless=${isWireless} apMacAddr=${apMacAddr} apName=${apName} apGroup=${apGroup} rfBand=${rfBand} radioChannel=${radioChannel} chWidth=${chWidth} protocol=${protocol} essid=${essid} bssid=${bssid} network=${network} noiseOnAp=${noiseOnAp} isBandStrOnAp=${isBandStrOnAp} isDfsOnAp=${isDfsOnAp} apModel=${apModel} snrDb=${snrDb} radioTechType=${radioTechType} is5ghzCapable=${is5ghzCapable} isDfsCapable=${isDfsCapable} isOnDualBandAp=${isOnDualBandAp} isLbOnAp=${isLbOnAp} apDwellTimeMs=${apDwellTimeMs} controllerIp=${controllerIp} deviceTypeDetails=${deviceTypeDetails} isIotDevice=${isIotDevice} isCritical=${isCritical} lastUpdated=${lastUpdated} createdAt=${createdAt} wannaCryLastTime=${wannaCryLastTime} radioTechTypeDescription=${radioTechTypeDescription} radioTechTypeChannelWidth=${radioTechTypeChannelWidth} locationNames=${locationNames}

output.format.applicationList_last24h=appName=${appName} userCount=${userCount} totalBytes=${totalBytes} aggWindow=${aggWindow} aggUpdated=${aggUpdated}

output.format.applicationList_last3h=appName=${appName} userCount=${userCount} totalBytes=${totalBytes} aggWindow=${aggWindow} aggUpdated=${aggUpdated}

output.format.deviceEventList_all=uuid=${uuid} macAddr=${macAddr} ipAddress=${ipAddress} description=${description} sampleTime=${sampleTime} attribute=${attribute} oldValue=${oldValue} newValue=${newValue}
